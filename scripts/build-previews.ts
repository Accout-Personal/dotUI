import fs from "fs";
import path from "path";
import { rimraf } from "rimraf";

interface TsxFile {
  fullPath: string;
  relativePath: string[];
}

export const getAllTsxFiles = (
  directory: string,
  rootDirectory: string,
  filesArray: TsxFile[] = []
): TsxFile[] => {
  const files = fs.readdirSync(directory);

  files.forEach((file) => {
    const filePath = path.join(directory, file);
    const fileStat = fs.statSync(filePath);

    if (fileStat.isDirectory()) {
      getAllTsxFiles(filePath, rootDirectory, filesArray);
    } else if (path.extname(file) === ".tsx") {
      const relativePath = path
        .relative(rootDirectory, filePath)
        .split(path.sep)
        .map((segment) => segment.replace(".tsx", ""));
      filesArray.push({ fullPath: filePath, relativePath });
    }
  });

  return filesArray;
};

const getAllPreviews = () => {
  const directoryPath = path.join(process.cwd(), "content");
  return getAllTsxFiles(directoryPath, directoryPath);
};

const allPreviews = getAllPreviews();

let index = `
// This file is autogenerated by scripts/build-preview-imports.ts
// Do not edit this file directly.
import React from "react";

export const previews = {
`;
allPreviews.forEach((preview) => {
  const codeString = fs.readFileSync(preview.fullPath, "utf-8");
  index += `  "${preview.relativePath.join("/")}": {
    component: React.lazy<React.FC>(() => import("~/content/${preview.relativePath.join("/")}")),
    code : \`${codeString}\`
  }${allPreviews[allPreviews.length - 1] === preview ? "" : ","}
`;
});

index += `}`;

rimraf.sync(path.join(process.cwd(), "src", "autogenerated", "previews.ts"));
fs.writeFileSync(
  path.join(process.cwd(), "src", "autogenerated", "previews.ts"),
  index
);

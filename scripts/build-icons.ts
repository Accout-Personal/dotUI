import fs from "fs";
import lucideIcons from "lucide-static";
import path from "path";
import { rimraf } from "rimraf";
import * as simpleIcons from "simple-icons";
import { parse, type Node as SVGNode, type RootNode } from "svg-parser";

type TransformedNode = [string, Record<string, string>];

// TODO: add keys to the icons
// TODO: change this script to download all svg icons from github, optimize them with svgo and then generate the data icons, then format the generated code,
// This way we can have a more dynamic way to add new icons libraries (by just adding a new object with metadata and the path to the icons)
// TODO: add defaultAttributes to the icons for each library
// TODO: add some metadata such as keywords for

function transformSVG(svgString: string): TransformedNode[] {
  const parsedSVG = parse(svgString);
  function attrsToObject(attrs: Record<string, string | number>): Record<string, string> {
    const obj: Record<string, string> = {};
    for (const key in attrs) {
      if (Object.prototype.hasOwnProperty.call(attrs, key)) {
        obj[key] = attrs[key].toString();
      }
    }
    return obj;
  }

  function traverse(node: RootNode | SVGNode): TransformedNode[] {
    if (node.type === "text") {
      return [];
    }
    const transformed: TransformedNode[] = [];
    if (node.type === "element" || node.type === "root") {
      if (
        node.type == "element" &&
        node.tagName &&
        node.tagName !== "svg" &&
        node.tagName !== "title" &&
        node.properties
      ) {
        transformed.push([node.tagName, attrsToObject(node.properties)]);
      }
      if (node.children) {
        node.children.forEach((child) => {
          if (typeof child === "string") {
            return;
          }
          transformed.push(...traverse(child));
        });
      }
    }
    return transformed;
  }

  return traverse(parsedSVG);
}

function processLucideIcons() {
  let index = `
  // This file is autogenerated by scripts/build-icons.ts
  // Do not edit this file directly.

  export const icons = [
  `;
  Object.keys(lucideIcons).map((name) => {
    const icon = lucideIcons[name as keyof typeof lucideIcons];
    const transformedIcon = transformSVG(icon);
    index += ` {
    name: \`${name}\`,
    icon: ${JSON.stringify(transformedIcon)},
    },`;
  });
  index += `]`;

  rimraf.sync(path.join(process.cwd(), "src", "autogenerated", "lucide-icons.ts"));
  fs.writeFileSync(
    path.join(process.cwd(), "src", "autogenerated", "icons", "lucide-icons.ts"),
    index
  );
}

function processSimpleIcons() {
  let index = `
  // This file is autogenerated by scripts/build-icons.ts
  // Do not edit this file directly.

  export const icons = [
  `;
  Object.keys(simpleIcons).map((name) => {
    const icon = simpleIcons[name as keyof typeof simpleIcons];
    const transformedIcon = transformSVG(icon.svg);
    index += ` {
    name: \`${icon.title}\`,
    icon: ${JSON.stringify(transformedIcon)},
    },`;
  });
  index += `]`;

  rimraf.sync(path.join(process.cwd(), "src", "autogenerated", "simple-icons.ts"));
  fs.writeFileSync(
    path.join(process.cwd(), "src", "autogenerated", "icons", "simple-icons.ts"),
    index
  );
}

void processLucideIcons();
void processSimpleIcons();

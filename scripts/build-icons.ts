import { transform } from "@svgr/core";
import fs from "fs";
import lucideIcons from "lucide-static";
import path from "path";
import { rimraf } from "rimraf";
import * as simpleIcons from "simple-icons";

async function processLucideIcons() {
  let index = `
  // This file is autogenerated by scripts/build-icons.ts
  // Do not edit this file directly.

  export const icons = [
  `;
  const promises = Object.keys(lucideIcons).map(async (name) => {
    const icon = lucideIcons[name as keyof typeof lucideIcons];
    // Using transform from @svgr/core to transform the SVG into a React component string
    try {
      const component = await transform(
        icon,
        {
          plugins: ["@svgr/plugin-jsx", "@svgr/plugin-prettier"],
          icon: true,
        },
        { componentName: `${name}Icon` }
      );
      // Append the transformed SVG component to the index string
      index += ` {
        name: \`${name}\`,
        icon: \`${icon}\`,
        code: \`${component}\`
        },`;
    } catch (error) {
      console.log(`Error processing ${name}`);
      console.log(lucideIcons[name as keyof typeof lucideIcons]);
    }
  });
  await Promise.all(promises);
  index += `]`;

  rimraf.sync(path.join(process.cwd(), "src", "autogenerated", "lucide-icons.ts"));
  fs.writeFileSync(
    path.join(process.cwd(), "src", "autogenerated", "icons", "lucide-icons.ts"),
    index
  );
}

async function processSimpleIcons() {
  let index = `
  // This file is autogenerated by scripts/build-icons.ts
  // Do not edit this file directly.

  export const icons = [
  `;
  const promises = Object.keys(simpleIcons).map(async (name) => {
    const icon = simpleIcons[name as keyof typeof simpleIcons];
    // Using transform from @svgr/core to transform the SVG into a React component string
    try {
      const component = await transform(
        icon.svg,
        {
          plugins: ["@svgr/plugin-jsx", "@svgr/plugin-prettier"],
          icon: true,
        },
        { componentName: `Icon` }
      );
      // Append the transformed SVG component to the index string
      index += ` {
        name: \`${icon.title}\`,
        icon: \`${icon.svg}\`,
        code: \`${component}\`
      },`;
    } catch (error) {
      console.log(`Error processing ${icon.title}`);
    }
  });
  await Promise.all(promises);
  index += `]`;

  rimraf.sync(path.join(process.cwd(), "src", "autogenerated", "simple-icons.ts"));
  fs.writeFileSync(
    path.join(process.cwd(), "src", "autogenerated", "icons", "simple-icons.ts"),
    index
  );
}

void processLucideIcons();
void processSimpleIcons();

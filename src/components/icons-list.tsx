"use client";

import React from "react";
import { useWindowVirtualizer } from "@tanstack/react-virtual";
import { SearchIcon } from "lucide-react";
import { cn } from "@/utils/classes";
import { createIcon } from "@/utils/icon";
import type { IconNode, Library } from "@/types/icons";
import { useDebounce } from "@/modules/hooks/use-debounce";
import { IconWrapper } from "./icon-wrapper";
import { Input } from "./ui/input";
import { Skeleton } from "./ui/skeleton";

// TODO: Add copy code (make an util function)

interface IconsListProps extends React.HTMLAttributes<HTMLDivElement> {
  libraries: Library[];
}

export default function IconsList(props: IconsListProps) {
  const { className, libraries } = props;

  const [allIcons, setAllIcons] = React.useState<{ name: string; icon: IconNode }[]>([]);
  const [searchTerm, setSearchTerm] = React.useState("");
  const debouncedSearchTerm = useDebounce(searchTerm, 300);

  const icons = React.useMemo(() => {
    return allIcons.filter((icon) =>
      icon.name.toLowerCase().includes(debouncedSearchTerm.toLowerCase())
    );
  }, [allIcons, debouncedSearchTerm]);

  React.useEffect(() => {
    const loadIcons = async () => {
      let loadedIcons: { name: string; icon: IconNode }[] = [];
      if (libraries.includes("lucide-icons")) {
        const { icons: lucideIcons } = await import("@/autogenerated/icons/lucide-icons");
        loadedIcons = [...loadedIcons, ...lucideIcons] as {
          name: string;
          icon: IconNode;
        }[];
      }
      if (libraries.includes("simple-icons")) {
        const { icons: simpleIcons } = await import("@/autogenerated/icons/simple-icons");
        loadedIcons = [...loadedIcons, ...simpleIcons] as {
          name: string;
          icon: IconNode;
        }[];
      }
      setAllIcons(loadedIcons);
    };

    void loadIcons();
  }, [libraries]);

  const listRef = React.useRef<HTMLDivElement | null>(null);
  const [itemsPerRow, setItemsPerRow] = React.useState<number>(calculateItemsPerRow());

  function calculateItemsPerRow() {
    if (typeof window === "undefined") return 16;
    const screenWidth = window.innerWidth;
    // Calculate items per row based on screen width
    if (screenWidth >= 1024) {
      return 16; // lg screens
    } else if (screenWidth >= 768) {
      return 12; // md screens
    } else if (screenWidth >= 640) {
      return 10; // sm screens
    } else if (screenWidth >= 480) {
      return 8; // xs screens
    } else {
      return 6; // xxs screens
    }
  }

  React.useEffect(() => {
    function handleResize() {
      setItemsPerRow(calculateItemsPerRow());
    }

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const count = icons.length === 0 ? 20 : Math.ceil(icons.length / itemsPerRow);
  const virtualizer = useWindowVirtualizer({
    count,
    estimateSize: () => 66,
    overscan: 5,
    scrollMargin: listRef.current?.offsetTop ?? 0,
  });

  return (
    <div>
      <div className="relative">
        <Input
          className="w-full pl-12"
          placeholder={`Search ${icons.length ? `${icons.length} ` : ""}icons...`}
          value={searchTerm}
          onChange={(e) => {
            setSearchTerm(e.target.value);
          }}
        />
        <SearchIcon
          size={18}
          className="pointer-events-none absolute left-4 top-1/2 -translate-y-1/2 transform text-muted-foreground"
        />
      </div>
      <div ref={listRef} className={className}>
        <div
          style={{
            height: `${virtualizer.getTotalSize()}px`,
            width: "100%",
            position: "relative",
          }}
        >
          {virtualizer.getVirtualItems().map((item) => {
            return (
              <div
                key={item.key}
                style={{
                  position: "absolute",
                  top: 0,
                  left: 0,
                  width: "100%",
                  height: `${item.size}px`,
                  transform: `translateY(${
                    item.start - virtualizer.options.scrollMargin
                  }px)`,
                }}
              >
                <div
                  className={cn("grid grid-cols-16 gap-2 animate-in fade-in", {
                    "grid-cols-12": itemsPerRow === 12,
                    "grid-cols-10": itemsPerRow === 10,
                    "grid-cols-8": itemsPerRow === 8,
                    "grid-cols-6": itemsPerRow === 6,
                  })}
                >
                  {allIcons.length > 0
                    ? icons
                        .slice(item.index * itemsPerRow, (item.index + 1) * itemsPerRow)
                        .map((icon, index) => {
                          const Icon = createIcon(icon.name, icon.icon);
                          return (
                            <IconWrapper key={index} name={icon.name} code={""}>
                              <Icon />
                            </IconWrapper>
                          );
                        })
                    : Array.from({ length: itemsPerRow }).map((_, index) => (
                        <Skeleton key={index} className="h-14" />
                      ))}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}
